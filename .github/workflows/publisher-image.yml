name: IG Publisher Docker Image

on:
  push:
    branches: [ main ]
  #schedule:
  #  - cron: '0 20 * * *'

concurrency: publisher

defaults:
  run:
    shell: bash
    working-directory: publisher

jobs:
  find-versions:
    runs-on: ubuntu-latest
    if: ${{ !endsWith(github.event.head_commit.message, '-GHB') }}
    outputs:
      latest: ${{ steps.find-versions.outputs.latest }}
      build-versions: ${{ steps.find-versions.outputs.build-versions }}
    steps:
      - id: checkout
        uses: actions/checkout@v3

      - name: user ids
        run: |
          echo =============== USER INFO ===================
          echo ============= ID:  $(id)
          echo ============= ls -la:
          ls -la
          echo ===========  cat /etc/passwd
          cat /etc/passwd
          echo =========== UMASK
          umask

      - id: find-versions
        name: find
        run: |
          set -x 
          pwd
          jq --version
          LATEST="$(curl "https://api.github.com/repos/hl7/fhir-ig-publisher/releases/latest" | jq -c '.tag_name')"
          echo "latest=${LATEST}" >> $GITHUB_OUTPUT
          
          TO_BUILD="$(jq -c --argjson latest "$LATEST" '
              [.build_versions
              | if has($latest) then empty else $latest end,
              (to_entries[] | select(( .value.built // "null" | startswith("yes") | not ) and ( .value.built // "null" | startswith("failed") | not )).key)
              ] | sort
          ' ./builds.json)"
          echo "build-versions=${TO_BUILD}" >> $GITHUB_OUTPUT

  build:
    name: Build the image.
    runs-on: ubuntu-latest
    needs:
      - find-versions
    if: ${{ needs.find-versions.outputs.build-versions != '[]' && needs.find-versions.outputs.build-versions != '' }}
    strategy:
      matrix:
        version: ${{ fromJSON(needs.find-versions.outputs.build-versions) }}
      fail-fast: false
      max-parallel: 1
    env:
      TEST_TAG: user/app:test
    steps:

      - id: checkout
        uses: actions/checkout@v3

      - name: Timestamp and tags
        id: tt
        run: |
          set -x
          if [[ "${{ matrix.version }}" == "${{ needs.find-versions.outputs.latest }}" ]]; then
            TAGS='${{ secrets.DH_USERNAME }}/${{ secrets.DH_REPOSITORY }}:${{ matrix.version }}-latest,${{ secrets.DH_USERNAME }}/${{ secrets.DH_REPOSITORY }}:${{ matrix.version }}-'$(date "+%Y%m%d_%H%M%S")',${{ secrets.DH_USERNAME }}/${{ secrets.DH_REPOSITORY }}:latest'
          else
            TAGS='${{ secrets.DH_USERNAME }}/${{ secrets.DH_REPOSITORY }}:${{ matrix.version }}-latest,${{ secrets.DH_USERNAME }}/${{ secrets.DH_REPOSITORY }}:${{ matrix.version }}-'$(date "+%Y%m%d_%H%M%S")
          fi
          echo "tags=${TAGS}" >> $GITHUB_OUTPUT

      - id: force-pull
        run: |
          git pull --ff-only

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DH_USERNAME }}
          password: ${{ secrets.DH_TOKEN }}

      - name: Build and export to Docker
        uses: docker/build-push-action@v3
        with:
          context: publisher/
          build-args: PUBLISHER_TAG=${{ matrix.version }}
          load: true
          tags: ${{ env.TEST_TAG }}

      - name: Test with IG
        run: |
          set -x
          docker run --volume  sample-ig:/ig "$TEST_TAG" -ig ig.ini

      -
        name: Build and push
        uses: docker/build-push-action@v3
        with:
          context: publisher/
          platforms: linux/amd64,linux/arm64
          build-args: PUBLISHER_TAG=${{ matrix.version }}
          push: true
          tags: ${{ steps.tt.outputs.tags}}

      - name: Update builds.json succeeded
        run: |
          set -x
          TMP_BUILDS=$(mktemp /tmp/builds.json.XXXXX)
          NOW=$(date)
          jq --arg version "${{ matrix.version }}" --arg now "$NOW" '
              . as $root |
              .build_versions |
              if has($version) then ( $root | .build_versions[$version]["built"] |= "yes \( $now)" ) else ( $root | .build_versions[$version] |= {"built": "yes \( $now)" }) end 
              ' builds.json > "$TMP_BUILDS"
          mv "$TMP_BUILDS" builds.json

          #git diff
          git config --global user.name 'Shahim Essaid Workflow'
          git config --global user.email 'shahim@essaid.com'
          # we need this to make sure the .fhir changes are also committed
          git add -A
          git commit -m "Actions build succeeded -GHB"
          #cat .git/config
          git push

      -
        name: Update builds.json failed
        if: failure()
        run: |
          set -x
          TMP_BUILDS=$(mktemp /tmp/builds.json.XXXXX)
          jq --arg version "${{ matrix.version }}" --arg now "$NOW"  '
              . as $root |
              .build_versions |
              if has($version) then ( $root | .build_versions[$version]["built"] |= "failed \( $now)"   ) else ( $root | .build_versions[$version] |= {"built": "failed \( $now)"}) end 
              ' builds.json > "$TMP_BUILDS"
          mv "$TMP_BUILDS" builds.json

          git diff
          git config --global user.name 'Shahim Essaid Workflow'
          git config --global user.email 'shahim@essaid.com'
          git commit -am "Actions build failed -GHB"
          #cat .git/config
          git push
