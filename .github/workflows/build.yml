name: IG Publisher Docker Image CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  find-versions:
    runs-on: ubuntu-latest
    outputs:
      latest: ${{ steps.find-versions.outputs.latest }}
      to-build: ${{ steps.find-versions.outputs.build-versions }}
    #      built-versions: ${{ steps.find-versions.outputs.built-versions }}
    #      not-built-versions: ${{ steps.find-versions.outputs.not-built-versions }}
    #      latest-version: ${{ steps.find-versions.outputs.latest-version }}
    #
    #      last-version: "1.1.117"
    #      latest-version-array: "[\"1.1.118\"]"
    #      build-versions-array: "[\"1.1.115\",\"1.1.116\"]"
    steps:
      - id: checkout
        uses: actions/checkout@v3

      - id: find-versions
        name: find
        run: |
          set -x 
          LATEST="$(curl "https://api.github.com/repos/hl7/fhir-ig-publisher/releases/latest" | jq -c '.tag_name')"
          echo ::set-output name=latest::"$LATEST"
          
          TO_BUILD="$(jq -c --argjson latest "$LATEST" '[.build_versions | to_entries[] | select(.value.built == "no" ).key | [.,$latest] | unique]' ./builds.json)"
          echo ::set-output name=build-versions::"$TO_BUILD"

#          BUILD_VERSIONS=$(jq -c '[ .versions | to_entries[] | select(.value.build_versions == "no" ).key]' ./builds.json)
#          TO_BUILD="$(echo "$NOT_BUILT" | jq -c --argjson latest "$LATEST" '[.,$latest] | flatten | unique')"



      #          BUILT="$(jq -c '[ .versions | to_entries[] | select(.value.built == "yes" or .value.built == "failed").key]' ./builds.json)"
      #          echo ::set-output name=built-versions::"$BUILT"
      #          echo ::set-output name=not-built-versions::"$NOT_BUILT"
      #
      #          echo ::set-output name=latest-version::"$LATEST"
      #          echo TO BUILD "$BUILD"

      - id: echo-outputs
        name: echo
        run: |
          echo LATEST: '${{ steps.find-versions.outputs.latest }}'
          echo BUILD VERSIONS: '${{ steps.find-versions.outputs.latests }}'
          #          echo NOT BUILT VERSIONS: '${{ steps.find-versions.outputs.not-built-versions }}'
          #          echo LATEST VERSION: '${{ steps.find-versions.outputs.latest-version }}'
    
    

    #  build-latest:
    #    needs: find-versions
    #    if: needs.find-versions.outputs.latest-version != needs.find-versions.outputs.last-version
    #    uses: ./.github/workflows/build-image.yaml
    #    with:
    #      versions: ${{ needs.find-versions.outputs.latest-version-array }}
    #      latest: true
    #
    #  build-versions:
    #    needs: [find-versions, build-latest]
    #    uses: ./.github/workflows/build-image.yaml
    #    with:
    #      versions: ${{ needs.find-versions.outputs.build-versions-array }}
    #      latest: false


    #  build:
#    runs-on: ubuntu-latest
#    steps:
#      - name: Publisher's latest version
#        run: |
#          echo SE_PUBLISHER_TAG=$(curl "https://api.github.com/repos/hl7/fhir-ig-publisher/releases/latest" | jq -r .tag_name) >> $GITHUB_ENV
#
#      - name: Checking out
#        uses: actions/checkout@v3
#
#      - name: Last build version
#        run: |
#          echo SE_LAST_BUILD_TAG=$(jq -r  '.build["last-tag"]' config.json) >> $GITHUB_ENV
#
#      - name: Show env
#        run: |
#          env | sort
#
##      - name: Set up QEMU
##        if: env.SE_PUBLISHER_TAG != env.SE_LAST_BUILD_TAG
##        uses: docker/setup-qemu-action@v2
##
##      - name: Set up Docker Buildx
##        if: env.SE_PUBLISHER_TAG != env.SE_LAST_BUILD_TAG
##        uses: docker/setup-buildx-action@v2
##
##      - name: Login to DockerHub
##        if: env.SE_PUBLISHER_TAG != env.SE_LAST_BUILD_TAG
##        uses: docker/login-action@v2
##        with:
##          username: ${{ secrets.DH_USERNAME }}
##          password: ${{ secrets.DH_TOKEN }}
##
##      - name: Build and push
##        if: env.SE_PUBLISHER_TAG != env.SE_LAST_BUILD_TAG
##        uses: docker/build-push-action@v3
##        with:
##          context: .
##          push: true
##          tags: sessaid/ig-publisher:latest
#
#      - name: Update config with build tag
#        if: env.SE_PUBLISHER_TAG != env.SE_LAST_BUILD_TAG
#        run: |
#          jq --arg a ${{ env.SE_PUBLISHER_TAG }} '.build["last-tag"] = $a' config.json > config.json.tmp
#          mv config.json.tmp config.json
#
#      - name: Git diff
#        run: |
#          git diff