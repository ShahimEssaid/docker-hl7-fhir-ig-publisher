name: IG Publisher Docker Image CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

concurrency: build

jobs:
  find-versions:
    runs-on: ubuntu-latest
    outputs:
      latest: ${{ steps.find-versions.outputs.latest }}
      build-versions: ${{ steps.find-versions.outputs.build-versions }}
    steps:
      - id: checkout
        uses: actions/checkout@v3

      - id: find-versions
        name: find
        run: |
          set -x 
          LATEST="$(curl "https://api.github.com/repos/hl7/fhir-ig-publisher/releases/latest" | jq -c '.tag_name')"
          echo ::set-output name=latest::"$LATEST"
          
          TO_BUILD="$(jq -c --argjson latest "$LATEST" '
              [.build_versions
              | if has($latest) then empty else $latest end,
              (to_entries[] | select(.value.built != "yes" and .value.built != "failed").key)
              ] | sort
          ' ./builds.json)"
          echo ::set-output name=build-versions::"$TO_BUILD"

      - id: echo-outputs
        name: echo
        run: |
          echo LATEST: '${{ steps.find-versions.outputs.latest }}'
          echo BUILD VERSIONS: '${{ steps.find-versions.outputs.build-versions }}'
          #          echo NOT BUILT VERSIONS: '${{ steps.find-versions.outputs.not-built-versions }}'
          #          echo LATEST VERSION: '${{ steps.find-versions.outputs.latest-version }}'
  

  build:
    name: Build the image.
    runs-on: ubuntu-latest
    needs:
      - find-versions
    if: ${{ needs.find-versions.outputs.build-versions != '[]' && needs.find-versions.outputs.build-versions != '' }}
    strategy:
      matrix:
        version: ${{ fromJSON(needs.find-versions.outputs.build-versions) }}
      fail-fast: false
      max-parallel: 1
    env:
      TEST_TAG: user/app:test
    steps:
      - name: Timestamp and tags
        id: tt
        run: |
          set -x
          if [[ "${{ matrix.version }}" == "${{ needs.find-versions.outputs.latest }}" ]]; then
            TAGS='"sessaid/ig-publisher:${{ matrix.version }}-latest","sessaid/ig-publisher:${{ matrix.version }}-'$(date "+%Y%m%d_%H%M%S")'","sessaid/ig-publisher:latest"'
          else
            TAGS='"sessaid/ig-publisher:${{ matrix.version }}-latest","sessaid/ig-publisher:${{ matrix.version }}-'$(date "+%Y%m%d_%H%M%S")'"'
          fi
          echo '::set-output name=tags::'"$TAGS"

      - id: checkout
        uses: actions/checkout@v3
        with:
          repository: ShahimEssaid/docker-hl7-fhir-ig-publisher
          token: ${{secrets.GH_TOKEN}}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DH_USERNAME }}
          password: ${{ secrets.DH_TOKEN }}

      - name: Build and export to Docker
        uses: docker/build-push-action@v3
        with:
          context: .
          load: true
          tags: ${{ env.TEST_TAG }}
          build-args: PUBLISHER_TAG=${{ matrix.version }}

      - name: Test with IG
        run: |
          docker run --volume "$GITHUB_WORKSPACE"/sample-ig:/ig "$TEST_TAG" -ig /ig/ig.ini

      -
        name: Build and push
        uses: docker/build-push-action@v3
        with:
          context: .
          push: true
          build-args: PUBLISHER_TAG=${{ matrix.version }}
          tags: ${{ steps.tt.outputs.tags}}

      -
        name: Update builds.json
        run: |
          set -x
          TMP_BUILDS=$(mktemp /tmp/builds.json.XXXXX)
          jq --arg version "${{ matrix.version }}"  '. as $root | .build_versions | if has($version) and .$version != null then ( $root | .build_versions[$version]["built"] |= "yes" ) else ( $root | .build_versions[$version] |= {"built": "yes"}) end' builds.json > "$TMP_BUILDS"
          mv "$TMP_BUILDS" builds.json
          
          git diff
          git config --global user.name 'Shahim Essaid Workflow'
          git config --global user.email 'shahim@essaid.com'
          git commit -am "Docker built workflow."
          
          ls -la
          cat .git/config
          
          # git remote set-url origin "https://github.com/ShahimEssaid/docker-hl7-fhir-ig-publisher"
          # git push
          
        
        
        

      #  build-latest:
      #    needs: find-versions
      #    if: needs.find-versions.outputs.latest-version != needs.find-versions.outputs.last-version
      #    uses: ./.github/workflows/build-image.yaml
      #    with:
      #      versions: ${{ needs.find-versions.outputs.latest-version-array }}
      #      latest: true
      #
      #  build-versions:
      #    needs: [find-versions, build-latest]
      #    uses: ./.github/workflows/build-image.yaml
      #    with:
      #      versions: ${{ needs.find-versions.outputs.build-versions-array }}
      #      latest: false


      #  build:
#    runs-on: ubuntu-latest
#    steps:
#      - name: Publisher's latest version
#        run: |
#          echo SE_PUBLISHER_TAG=$(curl "https://api.github.com/repos/hl7/fhir-ig-publisher/releases/latest" | jq -r .tag_name) >> $GITHUB_ENV
#
#      - name: Checking out
#        uses: actions/checkout@v3
#
#      - name: Last build version
#        run: |
#          echo SE_LAST_BUILD_TAG=$(jq -r  '.build["last-tag"]' config.json) >> $GITHUB_ENV
#
#      - name: Show env
#        run: |
#          env | sort
#
##      - name: Set up QEMU
##        if: env.SE_PUBLISHER_TAG != env.SE_LAST_BUILD_TAG
##        uses: docker/setup-qemu-action@v2
##
##      - name: Set up Docker Buildx
##        if: env.SE_PUBLISHER_TAG != env.SE_LAST_BUILD_TAG
##        uses: docker/setup-buildx-action@v2
##
##      - name: Login to DockerHub
##        if: env.SE_PUBLISHER_TAG != env.SE_LAST_BUILD_TAG
##        uses: docker/login-action@v2
##        with:
##          username: ${{ secrets.DH_USERNAME }}
##          password: ${{ secrets.DH_TOKEN }}
##
##      - name: Build and push
##        if: env.SE_PUBLISHER_TAG != env.SE_LAST_BUILD_TAG
##        uses: docker/build-push-action@v3
##        with:
##          context: .
##          push: true
##          tags: sessaid/ig-publisher:latest
#
#      - name: Update config with build tag
#        if: env.SE_PUBLISHER_TAG != env.SE_LAST_BUILD_TAG
#        run: |
#          jq --arg a ${{ env.SE_PUBLISHER_TAG }} '.build["last-tag"] = $a' config.json > config.json.tmp
#          mv config.json.tmp config.json
#
#      - name: Git diff
#        run: |
#          git diff
